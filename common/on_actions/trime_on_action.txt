###########
# trime_on_action
# made by:
# tr33
#
###########



# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
		#trime.500 # attacked enclave
		
	}
}

on_game_start = {
	events = {
		trime.0 # flag allowed
	}
}

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_victim = {
	events = {		
		#trime.501 #destroyed enclave
	
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_perp = {
	events = {
		
		
	}
}

# Triggers when trying to open the diplomacy view for countries with custom diplomacy.
# Country scope
# This = target country (player)
# From = source country
on_custom_diplomacy = {
	events = {
		#trime.1
		
	}
}

# Executed right after country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
on_post_communications_established = {
	events = {
		
		#trime.7
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
on_survey_planet = {
	events = {
		trime.1 # someone opened channel
	}

}

# Triggers event when each country first sends a ship into the system (once per country)
# Scope = Ship
# From = System
# FromFrom = Country
on_entering_system_first_time = {
	events = {
		trime.2 # weird time in this system
	}
}

# Triggers country_event for the attacker upon victory (before controller is switched)
# This = country, lead attacker
# From = country, planet owner
# FromFrom = planet
# 'Attacker' is the side that "IsHostile" to the planet controller. For example: spawned monster armies are attackers, but if they win and the player attempts to retake the planet, the player is the attacker
on_planet_attackers_win = {
	events = {
		trime.6 # invaded his planet
	}
}

# Executed just before on_leader_death if show_notification = yes (default)
# This = Country
# From = Leader
on_leader_death_notify = {
	events = {
		
	}
}

# Executed just before on_leader_death if show_notification = no (explicitly set)
# This = Country
# From = Leader
on_leader_death_no_notify = {
}

# Executed as a leader has died
# This = Country
# From = Leader
on_leader_death = {
	events = {
		trime.112 #check if he died		
	}
}

# Executed as a leader is hired
# This = Leader
on_leader_hired = {
	events = {
		
	}
}

# Executed as a leader has been fired
# This = Country
# From = Leader
on_leader_fired = {
	events = {
		trime.111 #kill him fr
		
	}
}


# A Megastructure has been built
# Root = Country
# From = Megastructure
# FromFrom = System
# FromFromFrom = Fleet
on_megastructure_built = {
	events = {
		
	}
}

# A Megastructure has begun to be upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
on_megastructure_upgrade_begin = {
	events = {
		trime.99
	}
}

# A Megastructure has been upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
on_megastructure_upgraded = {
	events = {
		
	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		trime.101
	}
}

# No scope, like on_game_start
on_five_year_pulse = {
	events = {
		trime.102 ## hourglass spin
		trime.113 ## random stuff
	}
	random_events = {
		#150 = 0
		#50 = situation.2000 # Situation - The Kaleidoscope
	}
}

# This = Country
on_relic_lost = {
	events = {
		#trime.103
	}
}

# This = Country
on_relic_received = {
	events = {
		trime.103
	}
}

# This = Country
on_relic_activated = {
	events = {
		trime.108
		
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
	
	}
}

# This = owner of fleet 1 (loser)
# From = owner of fleet 2 (winner)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_lost = {
	events = {
	}
}

# This = country
# From = opponent war leader
on_entering_war = {
	events = {
		trime.107
	}
}


# Executed just before on_leader_death if show_notification = yes (default)
# This = Country
# From = Leader
on_leader_death_notify = {
	events = {
		#paragon.549 # Leader Funeral Events
	}
}


# A war is beginning, executed for every country in the war.
# Root = Country
# From = War
on_war_beginning = {
	events = {
		
	}
}

on_colony_2_years_old = {
	events = {
		
	}
	random_events = {
		150 = 0

	}
}

# A galcom resolution failed to pass
# this/root = proposer
# from = target if valid
# To find out which resolution it was, use last_resolution_changed trigger
on_resolution_failed = {
}

# Executed when a country picks any tradition (including starters and finishers)
# THIS = country
on_tradition_picked = {
	events = {
		
	}
}

# Executed when a country picks an ascension perk
# THIS = country
on_ascension_perk_picked = {
	events = {
		
	}
}

# Executed when a country activates an agenda
# THIS = country
on_agenda_finished = {
	events = {
		
	}
}